// Code generated by protoc-gen-go.
// source: spec/runner.proto
// DO NOT EDIT!

package spec

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The run file
type RunFile struct {
	// The commands
	Commands map[string]*RunCommand `protobuf:"bytes,1,rep,name=commands" json:"commands,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RunFile) Reset()                    { *m = RunFile{} }
func (m *RunFile) String() string            { return proto.CompactTextString(m) }
func (*RunFile) ProtoMessage()               {}
func (*RunFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RunFile) GetCommands() map[string]*RunCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

// The run command
type RunCommand struct {
	// Name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Comment
	Comment string `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	// (Command) arguments
	Args []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	// Workdir
	Workdir string `protobuf:"bytes,4,opt,name=workdir" json:"workdir,omitempty"`
	// Environment variables
	Envs []string `protobuf:"bytes,5,rep,name=envs" json:"envs,omitempty"`
}

func (m *RunCommand) Reset()                    { *m = RunCommand{} }
func (m *RunCommand) String() string            { return proto.CompactTextString(m) }
func (*RunCommand) ProtoMessage()               {}
func (*RunCommand) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RunCommand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RunCommand) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *RunCommand) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RunCommand) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func (m *RunCommand) GetEnvs() []string {
	if m != nil {
		return m.Envs
	}
	return nil
}

// The running process
type RunProcess struct {
	// The id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Process state
	State *RunProcessState `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	// The run command of this process
	Command *RunCommand `protobuf:"bytes,3,opt,name=command" json:"command,omitempty"`
	// The log
	Log *RunProcessLog `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
}

func (m *RunProcess) Reset()                    { *m = RunProcess{} }
func (m *RunProcess) String() string            { return proto.CompactTextString(m) }
func (*RunProcess) ProtoMessage()               {}
func (*RunProcess) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RunProcess) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RunProcess) GetState() *RunProcessState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *RunProcess) GetCommand() *RunCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *RunProcess) GetLog() *RunProcessLog {
	if m != nil {
		return m.Log
	}
	return nil
}

// State of run process
type RunProcessState struct {
	// The pid
	Pid int32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// The workdir (absolute path)
	Workdir string `protobuf:"bytes,3,opt,name=workdir" json:"workdir,omitempty"`
	// The start time
	StartTime *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=startTime" json:"startTime,omitempty"`
}

func (m *RunProcessState) Reset()                    { *m = RunProcessState{} }
func (m *RunProcessState) String() string            { return proto.CompactTextString(m) }
func (*RunProcessState) ProtoMessage()               {}
func (*RunProcessState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RunProcessState) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *RunProcessState) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func (m *RunProcessState) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

// Run process log
type RunProcessLog struct {
	// Stdout log
	Stdout string `protobuf:"bytes,1,opt,name=stdout" json:"stdout,omitempty"`
	// Stderr log
	Stderr string `protobuf:"bytes,2,opt,name=stderr" json:"stderr,omitempty"`
}

func (m *RunProcessLog) Reset()                    { *m = RunProcessLog{} }
func (m *RunProcessLog) String() string            { return proto.CompactTextString(m) }
func (*RunProcessLog) ProtoMessage()               {}
func (*RunProcessLog) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RunProcessLog) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *RunProcessLog) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func init() {
	proto.RegisterType((*RunFile)(nil), "openlight.spec.RunFile")
	proto.RegisterType((*RunCommand)(nil), "openlight.spec.RunCommand")
	proto.RegisterType((*RunProcess)(nil), "openlight.spec.RunProcess")
	proto.RegisterType((*RunProcessState)(nil), "openlight.spec.RunProcessState")
	proto.RegisterType((*RunProcessLog)(nil), "openlight.spec.RunProcessLog")
}

func init() { proto.RegisterFile("spec/runner.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x51, 0x6b, 0xd5, 0x30,
	0x14, 0xc7, 0x49, 0x7b, 0xbb, 0x79, 0x4f, 0xd9, 0xd4, 0x3c, 0x48, 0x2c, 0xc8, 0x4a, 0x41, 0xb8,
	0x4f, 0xe9, 0xb8, 0x2a, 0x0c, 0x5f, 0xc4, 0x89, 0x3e, 0xf9, 0x70, 0x89, 0x03, 0xc1, 0xb7, 0xdc,
	0x36, 0x76, 0x61, 0x6d, 0x52, 0x92, 0x74, 0x63, 0xe0, 0xd7, 0xf1, 0x4b, 0xf8, 0xe9, 0x24, 0x6d,
	0xea, 0xec, 0x98, 0xf8, 0x76, 0x4e, 0xce, 0xef, 0x9c, 0xf3, 0x3f, 0x27, 0x07, 0x9e, 0xda, 0x5e,
	0x54, 0xa5, 0x19, 0x94, 0x12, 0x86, 0xf6, 0x46, 0x3b, 0x8d, 0x8f, 0x75, 0x2f, 0x54, 0x2b, 0x9b,
	0x4b, 0x47, 0x7d, 0x30, 0x3b, 0x69, 0xb4, 0x6e, 0x5a, 0x51, 0x8e, 0xd1, 0xfd, 0xf0, 0xbd, 0x74,
	0xb2, 0x13, 0xd6, 0xf1, 0xae, 0x9f, 0x12, 0x8a, 0x9f, 0x08, 0x0e, 0xd9, 0xa0, 0x3e, 0xc9, 0x56,
	0xe0, 0xf7, 0xf0, 0xa8, 0xd2, 0x5d, 0xc7, 0x55, 0x6d, 0x09, 0xca, 0xe3, 0x4d, 0xba, 0x7d, 0x49,
	0x97, 0xf5, 0x68, 0x40, 0xe9, 0x87, 0xc0, 0x7d, 0x54, 0xce, 0xdc, 0xb2, 0x3f, 0x69, 0xd9, 0x57,
	0x38, 0x5a, 0x84, 0xf0, 0x13, 0x88, 0xaf, 0xc4, 0x2d, 0x41, 0x39, 0xda, 0xac, 0x99, 0x37, 0xf1,
	0x29, 0x24, 0xd7, 0xbc, 0x1d, 0x04, 0x89, 0x72, 0xb4, 0x49, 0xb7, 0xd9, 0x03, 0x2d, 0x42, 0x09,
	0x36, 0x81, 0x6f, 0xa3, 0x33, 0x54, 0xfc, 0x00, 0xb8, 0x0b, 0x60, 0x0c, 0x2b, 0xc5, 0x3b, 0x11,
	0xca, 0x8e, 0x36, 0x26, 0x70, 0xe8, 0x65, 0x08, 0xe5, 0xc6, 0xca, 0x6b, 0x36, 0xbb, 0x9e, 0xe6,
	0xa6, 0xb1, 0x24, 0xce, 0x63, 0x4f, 0x7b, 0xdb, 0xd3, 0x37, 0xda, 0x5c, 0xd5, 0xd2, 0x90, 0xd5,
	0x44, 0x07, 0xd7, 0xd3, 0x42, 0x5d, 0x5b, 0x92, 0x4c, 0xb4, 0xb7, 0x8b, 0x5f, 0x68, 0x6c, 0xbf,
	0x33, 0xba, 0x12, 0xd6, 0xe2, 0x63, 0x88, 0x64, 0x1d, 0x9a, 0x47, 0xb2, 0xc6, 0x6f, 0x20, 0xb1,
	0x8e, 0xbb, 0x79, 0xa4, 0x93, 0x07, 0x46, 0x0a, 0xa9, 0x5f, 0x3c, 0xc6, 0x26, 0x1a, 0xbf, 0x9e,
	0x14, 0x73, 0x55, 0x93, 0xf8, 0xbf, 0xbb, 0x98, 0x51, 0x5c, 0x42, 0xdc, 0xea, 0x66, 0x54, 0x9d,
	0x6e, 0x5f, 0xfc, 0xbb, 0xd5, 0x67, 0xdd, 0x30, 0x4f, 0x16, 0x37, 0xf0, 0xf8, 0x9e, 0x00, 0xff,
	0x2b, 0x7d, 0x98, 0x20, 0x61, 0xde, 0xfc, 0x7b, 0x1f, 0xf1, 0x72, 0x1f, 0x67, 0xb0, 0xb6, 0x8e,
	0x1b, 0x77, 0x21, 0x3b, 0x11, 0xba, 0x66, 0x74, 0x3a, 0x2b, 0x3a, 0x9f, 0x15, 0xbd, 0x98, 0xcf,
	0x8a, 0xdd, 0xc1, 0xc5, 0x3b, 0x38, 0x5a, 0xc8, 0xc1, 0xcf, 0xe0, 0xc0, 0xba, 0x5a, 0x0f, 0x2e,
	0xec, 0x2e, 0x78, 0xe1, 0x5d, 0x18, 0x13, 0x7e, 0x2e, 0x78, 0xe7, 0xa7, 0xf0, 0xbc, 0xd2, 0x1d,
	0x6d, 0xa4, 0xbb, 0x1c, 0xf6, 0xf7, 0x26, 0x3d, 0x4f, 0xd9, 0x78, 0xf8, 0x3b, 0x2f, 0x61, 0x87,
	0xbe, 0xad, 0xfc, 0xe3, 0xfe, 0x60, 0x54, 0xf4, 0xea, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b,
	0xd4, 0xe5, 0xf3, 0x1b, 0x03, 0x00, 0x00,
}
